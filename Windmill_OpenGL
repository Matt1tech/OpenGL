//ALBUKAAI MOHAMAD (MATT)
#include <Windows.h>
#include <gl/GL.h>
#include <math.h>
#include <iostream>

#pragma comment (lib, "OpenGL32.lib")

#define WINDOW_TITLE "OpenGL Window"


int qNo = 1; //represent question number
//Q1 setting
float Tx1, Ty1, Tz1, Tx2, Ty2, Tz2 = 0; //Translation for X,Y,Z
float TSpeed1 = 0.1;
float Tx, Ty = 0.0; //used to do translation on X & Y axis

//Q2 setting
float rotationAngle = 0.0f;
float rotationIncrement = 0.00000001f; // or any smaller value
float rotationSpeed = 0.003f;  // Default speed
float x = 0.0, y = 0.0;       //origin of circle (0,0)
float radius = 0.3;      //radius of the circle
float angle = 0.0;       //angle
float PI = 3.1429;       //PI
float x2 = 0, y2 = 0;    //point on circle
float noOfTriangle = 30;  //number of triangle used
float cloudtx = 0.01f;
float cloudx = 0.0;

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE) {
			PostQuitMessage(0);
		}
		else if (wParam == 0x31 || wParam == VK_NUMPAD1) //key 1
			qNo = 1;
		else if (wParam == 0x32 || wParam == VK_NUMPAD2) //key 2
			qNo = 2;
		else if (wParam == VK_LEFT) {
			//q1
			Tx1 -= TSpeed1;
			Tx2 += TSpeed1;
			//q2
			rotationIncrement = rotationSpeed;  // Note the change 
		}
		else if (wParam == VK_RIGHT) {

			//q1
			Tx1 -= TSpeed1;
			Tx2 += TSpeed1;
			//q2
			rotationIncrement = -rotationSpeed;   // And here
		}
		else if (wParam == VK_SPACE) {
			//q1
			Tx1 = 0;
			Ty1 = 0;
			Tx2 = 0;
			Ty2 = 0;

            //q2
			rotationIncrement = 0.0f;
		}
		else if (wParam == VK_UP) {

			//q1
			Ty1 -= TSpeed1;
			Ty2 += TSpeed1;
			//q2
			rotationSpeed += 0.1f;
			if (rotationIncrement > 0) {         // Update rotationIncrement
				rotationIncrement = rotationSpeed;
			}
			else if (rotationIncrement < 0) {
				rotationIncrement = -rotationSpeed;
			}
		}
		else if (wParam == VK_DOWN) {
			//q1
			Ty1 -= TSpeed1;
			Ty2 += TSpeed1;
			//q2
			rotationSpeed -= 0.1f;
			if (rotationSpeed < 0.0f) rotationSpeed = 0.0f; // Prevent negative speeds
			if (rotationIncrement > 0) {         // Update rotationIncrement
				rotationIncrement = rotationSpeed;
			}
			else if (rotationIncrement < 0) {
				rotationIncrement = -rotationSpeed;
			}
		}
		break;
	}

	return DefWindowProc(hWnd, msg, wParam, lParam);
}
//--------------------------------------------------------------------

bool initPixelFormat(HDC hdc)
{
	PIXELFORMATDESCRIPTOR pfd;
	ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));

	pfd.cAlphaBits = 8;
	pfd.cColorBits = 32;
	pfd.cDepthBits = 24;
	pfd.cStencilBits = 0;

	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;

	pfd.iLayerType = PFD_MAIN_PLANE;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;

	// choose pixel format returns the number most similar pixel format available
	int n = ChoosePixelFormat(hdc, &pfd);

	// set pixel format returns whether it sucessfully set the pixel format
	if (SetPixelFormat(hdc, n, &pfd))
	{
		return true;
	}
	else
	{
		return false;
	}
}
//--------------------------------------------------------------------







void Q1() {

	glPushMatrix();
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glLoadIdentity();

	glTranslatef(Tx1, Ty1, Tz1);
	glBegin(GL_QUADS);
	glColor3f(1, 0, 0);
	glVertex2f(-0.1, 0.1);
	glVertex2f(-0.1, 0);
	glVertex2f(0.1, 0);
	glVertex2f(0.1, 0.1);
	glEnd();

	glLoadIdentity();
	glTranslatef(Tx2, Ty2, Tz2);
	glBegin(GL_QUADS);
	glColor3f(1, 0, 0);
	glVertex2f(-0.1, 0.1);
	glVertex2f(-0.1, 0);
	glVertex2f(0.1, 0);
	glVertex2f(0.1, 0.1);
	glEnd();
	glPopMatrix();
}




void drawBlades() {

	float bladeLength = 0.6f;
	float bladeWidth = 0.05f;








	glColor3f(0.65f, 0.16f, 0.16f);
	glBegin(GL_QUADS);
	glVertex2f(-bladeWidth, bladeLength);
	glVertex2f(bladeWidth + 0.06f, bladeLength);
	glVertex2f(bladeWidth + 0.06f, 0.0f + 0.1f);
	glVertex2f(-bladeWidth, 0.0f + 0.1f);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(-bladeWidth - 0.06f, -bladeLength);
	glVertex2f(bladeWidth, -bladeLength);
	glVertex2f(bladeWidth, 0.0f - 0.1f);
	glVertex2f(-bladeWidth - 0.06f, 0.0f - 0.1f);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(bladeLength, bladeWidth);
	glVertex2f(bladeLength, -bladeWidth - 0.07f);
	glVertex2f(0.0f + 0.1f, -bladeWidth - 0.07f);
	glVertex2f(0.0f + 0.1f, bladeWidth);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(-bladeLength, bladeWidth + 0.07f);
	glVertex2f(-bladeLength, -bladeWidth);
	glVertex2f(0.0f - 0.1f, -bladeWidth);
	glVertex2f(0.0f - 0.1f, bladeWidth + 0.07f);
	glEnd();

	glColor3f(1.0f, 1.0f, 1.0f);
	glBegin(GL_QUADS);
	glVertex2f(-bladeWidth, bladeLength - 0.1f);
	glVertex2f(bladeWidth - 0.07f, bladeLength - 0.1f);
	glVertex2f(bladeWidth - 0.07f, 0.0f);
	glVertex2f(-bladeWidth, 0.0f);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(-bladeWidth + 0.07f, -bladeLength + 0.1f);
	glVertex2f(bladeWidth, -bladeLength + 0.1f);
	glVertex2f(bladeWidth, 0.0f);
	glVertex2f(-bladeWidth + 0.07f, 0.0f);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(bladeLength - 0.1f, bladeWidth);
	glVertex2f(bladeLength - 0.1f, -bladeWidth + 0.07f);
	glVertex2f(0.0f, -bladeWidth + 0.07f);
	glVertex2f(0.0f, bladeWidth);
	glEnd();

	glBegin(GL_QUADS);
	glVertex2f(-bladeLength + 0.1f, bladeWidth - 0.07f);
	glVertex2f(-bladeLength + 0.1f, -bladeWidth);
	glVertex2f(0.0f, -bladeWidth);
	glVertex2f(0.0f, bladeWidth - 0.07f);
	glEnd();
}


void drawCloud(float x, float y) {
	float PI = 3.14159265358979323846;
	int noOfTriangle = 30;
	float angle;
	float radius;
	float xOffset, yOffset;

	glColor3f(0.9f, 0.9f, 0.9f);

	float circleOffsets[5][2] = {
		{0.0f, 0.0f},
		{-0.06f, 0.03f},
		{0.06f, 0.03f},
		{-0.09f, -0.03f},
		{0.09f, -0.03f},
	};
	float circleRadii[5] = {
		0.08f, 0.07f, 0.07f, 0.06f, 0.06f
	};

	for (int i = 0; i < 5; i++) {
		xOffset = circleOffsets[i][0];
		yOffset = circleOffsets[i][1];
		radius = circleRadii[i];

		glBegin(GL_TRIANGLE_FAN);
		glVertex2f(x + xOffset, y + yOffset);
		for (angle = 0; angle <= (2 * PI); angle += (2 * PI) / noOfTriangle) {
			glVertex2f(x + xOffset + radius * cos(angle), y + yOffset + radius * sin(angle));
		}
		glEnd();
	}
}


void drawSun(float x, float y) {
	float PI = 3.14159265358979323846;
	int noOfTriangle = 30;
	float angle;
	float radius = 0.1f;

	glColor3f(1.0f, 1.0f, 0.0f);


	glBegin(GL_TRIANGLE_FAN);
	glVertex2f(x, y);
	for (angle = 0; angle <= (2 * PI); angle += (2 * PI) / noOfTriangle) {
		glVertex2f(x + radius * cos(angle), y + radius * sin(angle));
	}
	glEnd();
}

void drawMountain() {
	glColor3f(0.5f, 0.7f, 0.9f);

	glBegin(GL_POLYGON);
	glVertex2f(-1.0f, -0.5f);
	glVertex2f(-0.7f, 0.0f);
	glVertex2f(-0.4f, -0.3f);
	glVertex2f(-0.2f, 0.2f);
	glVertex2f(0.0f, -0.2f);
	glVertex2f(0.2f, 0.3f);
	glVertex2f(0.4f, -0.2f);
	glVertex2f(0.7f, 0.1f);
	glVertex2f(1.0f, -0.5f);
	glEnd();
}


void drawGreenGround() {



	glColor3f(0.0, 0.5, 0.0);
	glBegin(GL_POLYGON);

	glVertex2f(1.0, -0.5);
	glVertex2f(-1.0, -0.5);
	glVertex2f(-1.0, -1.0);
	glVertex2f(1.0, -1.0);



	glEnd();
}

void windMill() {






	// *** base of the windmill
	glPushMatrix();
	glTranslatef(0.35, 0.2, 0.0);
	glColor3f(0.50, 0.45, 0.3);
	glBegin(GL_QUADS);
	glVertex2f(-0.25f, -1.0f);
	glVertex2f(0.25f, -1.0f);
	glVertex2f(0.15f, 0.2f);
	glVertex2f(-0.15f, 0.2f);
	glEnd();

	glLineWidth(3);
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(0.2, 0.3, 0.5);
	glVertex2f(x, y + 0.21);
	for (angle = 0; angle <= (PI); angle += (PI) / noOfTriangle)
	{
		x2 = x + 0.15 * cos(angle);
		y2 = y + 0.22 * sin(angle);
		glVertex2f(x2, y2 + 0.21);
	}
	glEnd();
	//***base End
	// 
	// 
	// 
	// 
	//blades
	glPushMatrix();
	glTranslatef(0.0, 0.2, 1.0);
	glRotatef(rotationAngle, 0.0f, 0.0f, 1.0f);
	glScalef(0.8, 0.8, 0.0);
	glColor3f(0.2, 0.5, 0.8);
	drawBlades();
	glPopMatrix();
	///Blades End





	//****Center 

	glBegin(GL_LINE_LOOP);
	glColor3f(0.0, 0.0, 0.0);
	glVertex2f(x, y + 0.21);

	for (angle = 0; angle <= (2 * PI); angle += (2 * PI) / noOfTriangle)
	{
		x2 = x + 0.05 * cos(angle);
		y2 = y + 0.05 * sin(angle);
		glVertex2f(x2, y2 + 0.21);
	}
	glEnd();



	glBegin(GL_TRIANGLE_FAN);
	glColor3f(0.0, 0.0, 0.0);
	glVertex2f(x, y + 0.21);

	for (angle = 0; angle <= (2 * PI); angle += (2 * PI) / noOfTriangle)
	{
		x2 = x + 0.04 * cos(angle);
		y2 = y + 0.04 * sin(angle);
		glVertex2f(x2, y2 + 0.21);
	}
	glEnd();

	/////***center end 

	glPopMatrix();


}



bool isCloudCoveringSun(float cloudX, float sunX, float cloudY, float sunY) {
	float horizontalThreshold = 0.15f; // Adjust based on the size of the cloud and sun
	float verticalThreshold = 0.15f;   // Adjust based on the size of the cloud and sun

	return fabs(cloudX - sunX) < horizontalThreshold && fabs(cloudY - sunY) < verticalThreshold;
}











void Q2() {



	if (isCloudCoveringSun(cloudtx, -0.75f, 0.6f, 0.75f)) {
		glClearColor(0.0, 0.0, 0.98, 1.0);  // Change background color when cloud covers the sun
	}
	else {
		glClearColor(0.53, 0.81, 0.98, 1.0);  // Original color
	}
	glClear(GL_COLOR_BUFFER_BIT);
	drawGreenGround();
	drawMountain();
	drawSun(-0.8f, 0.75f);
	glPushMatrix();
	glTranslatef(cloudtx, 0.0, 0.0);
	drawCloud(-cloudx + 0.8f, 0.6f);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-cloudtx, 0.0, 0.0);
	drawCloud(0.2f, 0.4f);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-cloudtx, 0.0, 0.0);
	drawCloud(-cloudx - 0.2f, 0.85f);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(cloudtx, 0.0, 0.0);
	drawCloud(-cloudx, 0.8f);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.4, -0.3, 0.0);
	glScalef(0.4, 0.4, 0.0);
	windMill();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-0.8, -0.35, 0.0);
	glScalef(0.2, 0.2, 0.0);
	windMill();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-0.4, -0.07, 0.0);
	glScalef(0.8, 0.8, 0.0);
	windMill();
	glPopMatrix();
	cloudtx += 0.00005f;
	if (cloudtx > 1.0f) {
		cloudtx = -1.0f;
	}
	rotationAngle += rotationIncrement;

}



void display()
{
	//--------------------------------
	//	OpenGL drawing
	//--------------------------------
   // Determine if the cloud overlaps the sun.
	// Determine if the cloud overlaps the sun.

	switch (qNo) {
	case 1:
		Q1();
		break;
	case 2:
		Q2();
		break;
	}
	

}












int WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR, int nCmdShow)
{
	WNDCLASSEX wc;
	ZeroMemory(&wc, sizeof(WNDCLASSEX));

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = GetModuleHandle(NULL);
	wc.lpfnWndProc = WindowProcedure;
	wc.lpszClassName = WINDOW_TITLE;
	wc.style = CS_HREDRAW | CS_VREDRAW;

	if (!RegisterClassEx(&wc)) return false;

	HWND hWnd = CreateWindow(WINDOW_TITLE, WINDOW_TITLE, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, 1024, 768,
		NULL, NULL, wc.hInstance, NULL);


	//--------------------------------
	//	Initialize window for OpenGL
	//--------------------------------

	HDC hdc = GetDC(hWnd);

	//	initialize pixel format for the window
	initPixelFormat(hdc);

	//	get an openGL context
	HGLRC hglrc = wglCreateContext(hdc);

	//	make context current
	if (!wglMakeCurrent(hdc, hglrc)) return false;

	//--------------------------------
	//	End initialization
	//--------------------------------

	ShowWindow(hWnd, nCmdShow);

	MSG msg;
	ZeroMemory(&msg, sizeof(msg));

	while (true)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT) break;

			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		display();

		SwapBuffers(hdc);
	}

	UnregisterClass(WINDOW_TITLE, wc.hInstance);

	return true;
}
//--------------------------------------------------------------------
